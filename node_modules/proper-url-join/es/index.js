var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var queryString = require('query-string');
var defaultUrlRegExp = /^(\w+:\/\/[^/?]+)?(.*?)(\?.+)?$/;
var protocolRelativeUrlRegExp = /^(\/\/[^/?]+)(.*?)(\?.+)?$/;

function splitUrl(partsStr, _ref) {
    var protocolRelative = _ref.protocolRelative;

    var match = protocolRelative && partsStr.match(protocolRelativeUrlRegExp) || partsStr.match(defaultUrlRegExp) || [];

    var beforePathname = match[1] || '';
    var pathname = (match[2] || '').
    // Remove leading slashes
    replace(/^\/+/, '')
    // Remove trailing slashes
    .replace(/\/+$/, '')
    // Normalize consecutive slashes to just one
    .replace(/\/+/g, '/');
    var afterPathname = match[3] || '';

    return { beforePathname: beforePathname, pathname: pathname, afterPathname: afterPathname };
}

export default function urlJoin() {
    for (var _len = arguments.length, parts = Array(_len), _key = 0; _key < _len; _key++) {
        parts[_key] = arguments[_key];
    }

    var lastArg = parts[parts.length - 1];
    var options = void 0;

    // If last argument is an object, then it's the options
    // Note that null is an object, so we verify if is truthy
    if (lastArg && (typeof lastArg === 'undefined' ? 'undefined' : _typeof(lastArg)) === 'object') {
        options = lastArg;
        parts = parts.slice(0, -1);
    }

    // Parse options
    options = Object.assign({
        leadingSlash: true,
        trailingSlash: false,
        protocolRelative: false
    }, options);

    // Join parts
    var partsStr = parts.filter(function (part) {
        return typeof part === 'string' || typeof part === 'number';
    }).join('/');

    // Split the parts into beforePathname, pathname, and afterPathname
    // (scheme://host)(/pathname)(?queryString)

    var _splitUrl = splitUrl(partsStr, options),
        beforePathname = _splitUrl.beforePathname,
        pathname = _splitUrl.pathname,
        afterPathname = _splitUrl.afterPathname;

    var url = '';

    // Start with beforePathname if not empty (http://google.com)
    if (beforePathname) {
        url += beforePathname + (pathname ? '/' : '');
        // Otherwise start with the leading slash
    } else if (options.leadingSlash) {
        url += '/';
    }

    // Add pathname (foo/bar)
    url += pathname;

    // Add trailing slash
    if (options.trailingSlash && !url.endsWith('/')) {
        url += '/';
    }

    // Build a query object based on the url query string and options query object
    var query = Object.assign({}, queryString.parse(afterPathname, options.queryOptions), options.query);
    var queryStr = queryString.stringify(query, options.queryOptions);

    if (queryStr) {
        url += '?' + queryStr;
    }

    return url;
}